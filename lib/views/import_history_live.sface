<div class="max-w-4xl mx-auto w-full p-4">
  <div class="flex items-center justify-between mb-6">
    <!-- <h1 class="text-2xl font-bold">{l("Import History")}</h1> -->
    <button type="button" class="btn btn-outline btn-sm" phx-click="refresh">
      <#Icon iconify="heroicons:arrow-path" class="w-4 h-4 mr-2" />
      {l("Refresh")}
    </button>
  </div>

  <div :if={@stats != %{}} class="stats shadow mb-6">
    <div :for={{state, count} <- @stats} class="stat">
      <div class="stat-title">{String.capitalize(state)}</div>
      <div class="stat-value text-sm">{count}</div>
    </div>
  </div>

  <div :if={@jobs == []} class="text-center py-12">
    <div class="text-base-content/60">
      <#Icon iconify="heroicons:document-text" class="w-12 h-12 mx-auto mb-4 opacity-50" />
      <p class="text-lg font-medium mb-2">{l("No import history")}</p>
      <p>{l("Your import jobs will appear here once you start importing data.")}</p>
    </div>
  </div>

  <div :if={@jobs != []} class="space-y-4">
    <div :for={job <- @jobs} class="card bg-base-100 border border-base-content/10 shadow-sm">
      <div class="card-body p-4">
        <div class="flex items-start justify-between">
          <div class="flex-1">
            <div class="flex items-center gap-3 mb-2">
              <h3 class="font-semibold text-lg">{job.operation}</h3>
              <div class={"badge badge-sm " <> elem(format_state(job.state), 1)}>
                {elem(format_state(job.state), 0)}
              </div>
            </div>

            <div :if={job.target_user} class="mb-3">
              <StatelessComponent
                module={maybe_component(Bonfire.UI.Me.ProfileItemLive)}
                parent_id={"import_history_#{job.id}"}
                character={job.target_user}
                profile={e(job.target_user, :profile, nil)}
                show_summary
                wrapper_class="flex items-start gap-3 profile-item group"
                avatar_class="w-12 h-12"
                show_controls={[:follow, :add_to_circles, :blocks]}
              />
            </div>

            <div class="text-sm text-base-content/70 space-y-1">
              <p :if={job.identifier && !job.target_user}>
                <span class="font-medium">{l("Importing:")}</span>
                <span class="font-mono">{job.identifier}</span>
              </p>

              <p :if={job[:context] && !job.target_user}>
                <span class="font-medium">{l("Context:")}</span>
                <span class="font-mono">{job[:context]}</span>
              </p>

              <p>
                <span class="text-sm">{l("Started:")}</span>
                {job.inserted_at}
              </p>

              <p :if={job.completed_at}>
                <span class="text-sm">{l("Completed:")}</span>
                {job.completed_at}
              </p>

              <p :if={job.attempt > 1}>
                <span class="text-sm">{l("Attempts:")}</span>
                {job.attempt} / {job.max_attempts}
              </p>
            </div>
          </div>

          <div class="text-right text-xs text-base-content/50">
            #{job.id}
          </div>
        </div>

        <div :if={job.errors && job.errors != []} class="mt-3 p-3 bg-error/10 rounded-lg">
          <div class="flex items-start gap-2">
            <#Icon iconify="heroicons:exclamation-triangle" class="w-4 h-4 text-error mt-0.5 flex-shrink-0" />
            <div class="text-sm">
              <p class="font-medium text-error mb-1">{l("Error:")}</p>
              <pre class="text-xs text-error/80 whitespace-pre-wrap font-mono">{format_errors(job.errors)}</pre>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
